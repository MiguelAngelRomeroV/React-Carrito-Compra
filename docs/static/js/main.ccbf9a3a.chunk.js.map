{"version":3,"sources":["helpers/getProducts.js","hooks/useFetchProducts.js","components/ProductList.js","components/ProductSelect.js","App.js","serviceWorker.js","index.js"],"names":["getGifs","a","fetch","res","json","data","products","useFetchProducts","useState","loading","state","setState","useEffect","getProducts","then","prod","catch","err","console","log","ProductList","setProdId","className","map","p","key","id","src","image","alt","name","price","amount","currency","measureUnit","onClick","prodId","ProductSelect","Products","cartProducts","setCartProducts","totalProducts","setTotalProducts","mountProduct","addProducts","fullProduct","Set","myProduct","cantProduct","index","find","product","reduce","total","proId","cantidad","productCar","filter","toFixed","updateProducts","carritoId","updateId","handleButtonDelete","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ccbf9a3a.chunk.js","sourcesContent":["const getGifs = async () => {\r\n    const url = 'https://raw.githubusercontent.com/cobeisfresh/frontend-tasks/shopping-cart/products.json';\r\n    const res = await fetch(url);\r\n    const  data = await res.json();\r\n\r\n\r\n    return data.products;//array\r\n}\r\n\r\nexport default getGifs;","import {useState,useEffect} from 'react'\r\nimport getProducts from '../helpers/getProducts'\r\n\r\nexport const useFetchProducts = () => {\r\n    const [state,setState]=useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n    \r\n    useEffect(() => {\r\n        \r\n        getProducts()\r\n        .then(prod=>{\r\n                setState({\r\n                    data:prod,\r\n                    loading:false\r\n                });\r\n        })\r\n        .catch(err=>console.log(err));\r\n\r\n    }, [])\r\n    return state\r\n}","import React from 'react'\r\nimport { useFetchProducts } from '../hooks/useFetchProducts'\r\n\r\nexport default function ProductList({setProdId}) {\r\n    \r\n    const { data: products, loading } = useFetchProducts();\r\n    \r\n\r\n    const addProduct=(id) => {\r\n        setProdId(prodId=>[id,...prodId]);\r\n    }\r\n    \r\n    return (\r\n                <div className=\"grid md:grid-cols-3 grid-cols-2 md:gap-8 gap-4 md:p-8 p-4\">\r\n                    {loading && <p className=\"animate__animated animate__flash text-white\">Loanding</p>}\r\n                    {\r\n                        products.map(p =>\r\n                            <div className=\"max-w-sm rounded overflow-hidden shadow-xl animate__animated animate__flash\" key={p.id}>\r\n                                <img className=\"w-full\" \r\n                                src={p.image} \r\n                                alt={p.name} />\r\n                                <div className=\"px-6 py-4\">\r\n                                    <div className=\"font-bold md:text-xl text-xs mb-2\">\r\n                                        {p.name}\r\n                                    </div>\r\n                                    <p className=\"text-gray-700 text-base\">\r\n                                        <span className=\"md:text-2xl text-lg\">{p.price.amount} </span>\r\n                                        <span> {p.price.currency} /</span>\r\n                                        <span>{p.price.measureUnit}</span>\r\n                                    </p>\r\n\r\n                                </div>\r\n                                <div className=\"px-6 pt-1 pb-4\">\r\n                                    <button \r\n                                    className=\"btn bg-blue-600 md:px-8 px-4 rounded text-white md:py-1 md:text-lg text-sm\" \r\n                                    onClick={() =>addProduct(p.id)}\r\n                                    >\r\n                                     Add</button>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useFetchProducts } from '../hooks/useFetchProducts'\r\n\r\nexport default function ProductSelect({ prodId, setProdId }) {\r\n\r\n    const { data: Products, loading } = useFetchProducts();\r\n    const [cartProducts, setCartProducts] = useState([]);\r\n    const [totalProducts, setTotalProducts] = useState(0);\r\n\r\n    useEffect(() => {\r\n        mountProduct();\r\n        addProducts();\r\n    }, [prodId])\r\n\r\n    const addProducts = () => {\r\n        let fullProduct = [...new Set(prodId)];\r\n        let myProduct = []\r\n        let cantProduct = 0\r\n        const prod = fullProduct.map((prod, index) => {\r\n            myProduct = Products.find((product) =>\r\n                product.id === prod\r\n            );\r\n            cantProduct = prodId.reduce((total, proId) => {\r\n                return proId === prod ? total += 1 : total\r\n            }, 0);\r\n\r\n            myProduct.cantidad = cantProduct;\r\n            return myProduct\r\n        });\r\n        setCartProducts(prod);\r\n\r\n    }\r\n\r\n    const mountProduct = () => {\r\n        let total = 0\r\n        prodId.map((productCar) => {\r\n            let myProduct = Products.filter((product) =>\r\n                product.id === productCar\r\n            );\r\n            total = total + myProduct[0].price.amount;\r\n            setTotalProducts(total.toFixed(2));\r\n        });\r\n    }\r\n\r\n    const handleButtonDelete = (id) => {\r\n\r\n        const updateProducts = cartProducts.filter((carritoId) => {\r\n            return carritoId.id !== id;\r\n        });\r\n        const updateId = updateProducts.map(p => {\r\n            return p.id\r\n        })\r\n        setProdId(updateId);\r\n        setCartProducts(updateProducts);\r\n        mountProduct();\r\n    }\r\n\r\n    return (\r\n        <div className=\"p-2 pt-4\">\r\n            <h1 className=\"px-2 font-bold text-xl md:text-2xl text-white\">Kosarica</h1>\r\n            <div className=\"divide-y divide-gray-400\">\r\n                {loading && <p className=\"animate__animated animate__flash text-white\">Loanding</p>}\r\n                {\r\n                    cartProducts.map(p =>\r\n                        <div \r\n                        className=\"max-w-sm rounded overflow-hidden shadow-lg relative m-2\" \r\n                        key={p.id}>\r\n                            <div className=\"flex flex-wrap bg-blue-200\">\r\n                                <div className=\"w-2/5 \">\r\n                                    <img\r\n                                        className=\"w-full h-full\"\r\n                                        src={p.image}\r\n                                        alt=\"Producto\" />\r\n                                </div>\r\n                                <div className=\"w-3/5 p-2\">\r\n                                    <div className=\"font-bold text-sm mb-2\">\r\n                                    <span className=\"text-blue-600 text-lg\">{p.cantidad} </span>\r\n                                        <span className=\"text-blue-600 text-md\">\r\n                                             x  \r\n                                        </span> {p.name}\r\n                                    </div>\r\n                                    <p className=\"text-blue-600 text-base\">\r\n                                        <span>{(p.price.amount*p.cantidad).toFixed(2)} </span>\r\n                                        <span> {p.price.currency} </span>\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"items-center absolute top-0 right-0 h-6 w-6 rounded-full bg-transparent bg-red-600\">\r\n                                <button\r\n                                    className=\" h-6 w-6 rounded-full  text-white font-bold\"\r\n                                    onClick={() => handleButtonDelete(p.id)}\r\n                                >x</button>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n                <hr />\r\n                <div className=\"text-center text-white p-4\">\r\n                    <h2 className=\"font-bold text-lg\">Monto total</h2>\r\n                    <p className=\"text-xl\">{totalProducts}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React,{useState} from 'react';\nimport ProductList from \"./components/ProductList\";\nimport ProductSelect from \"./components/ProductSelect\";\n\n\nfunction App() {\n  const [prodId, setProdId] = useState([]);\n\n  return (\n    <div className=\"flex flex-wrap\">\n      <div className=\"md:w-4/5 w-full text-center\">\n        <ProductList setProdId={setProdId} />\n        <div className=\"md:h-1 h-48\"></div>\n      </div>\n      <div \n      className=\"md:w-1/5 fixed md:relative bottom-0 w-full shadow-2xl bg-blue-600 overflow-y-auto md:h-auto h-48 \">\n        <ProductSelect prodId={prodId} setProdId={setProdId} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/main.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}